#!/usr/bin/python3
# -*- mode: python; coding: utf-8 -*-
#
# glr - Gitlab Remote
#
# Copyright (C) 2014,2023 Elmar Hoffmann
#
# Commandline interface for gitlab to easily work with multiple repositories
#
# Requires Python 3, python-gitlab available from
# https://github.com/python-gitlab/python-gitlab/
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#


import sys
import os
import signal
import stat
import errno
import logging
import argparse
import configparser

import gitlab
from gitlab import Gitlab
from gitlab.config import GitlabDataError
from gitlab.exceptions import GitlabCreateError, GitlabHttpError, GitlabListError
from requests.exceptions import ConnectionError, RequestException


__version__ = '0.9'

CONFIG_USER='~/.gitlab-remote'


class Config(configparser.RawConfigParser):
    def __init__(self):
        configparser.RawConfigParser.__init__(self)

        self.logger = logging.getLogger(str(self.__class__))

        self.add_section('Gitlab')
        self.set('Gitlab', 'instance', '')

        self.add_section('General')
        self.set('General', 'default group', '')
        self.set('General', 'default visibility level', 'private')

        self.add_section('mr')
        self.set('mr', 'root project', '')

        config_exists = self.load_config(CONFIG_USER)
        legacy_host = self.get('Gitlab', 'host', fallback=False)

        if legacy_host:
            self.logger.warning('Legacy host and and token configuration found in'
                                'configuration file \'%s\'.\nPlease configure an'
                                ' according instance in \'~/.python-gitlab.cfg\''
                                ' instead.', CONFIG_USER)

        # Write default config if it does not exist, or rewrite config, if
        # legacy options were found, to ensure current options are present.
        if not config_exists or legacy_host:
            self.save_config(CONFIG_USER)

    def load_config(self, filename):
        try:
            fp = open(os.path.expanduser(filename), encoding='utf-8')
        except IOError as err:
            if err.errno == errno.ENOENT:
                self.logger.debug('Configuration file \'%s\' does not exist.',
                                  filename)
                return False
            raise ConfigException('Error reading configuration file: %s'
                                  % err) from err
        self.logger.debug('Reading configuration file \'%s\'...', filename)
        try:
            self.read_file(fp, source=filename)
        except configparser.Error as err:
            raise ConfigException('Error parsing configuration file: %s'
                                  % err) from err
        finally:
            fp.close()
        return True

    def save_config(self, filename):
        # Expand user homedirectories given as '~' or '~user'
        display_filename = filename
        filename = os.path.expanduser(filename)

        display_config_dir = os.path.split(display_filename)[0]
        config_dir = os.path.split(filename)[0]

        try:
            os.makedirs(config_dir)
        except OSError as err:
            if err.errno != errno.EEXIST:
                raise ConfigException('Error creating configuration' \
                    ' directory: %s' % err) from err
        else:
            self.logger.debug('Created configuration directory \'%s\'...',
                              display_config_dir)

        self.logger.debug('Writing configuration file \'%s\'...',
                          display_filename)
        try:
            fd = os.open(filename, os.O_WRONLY | os.O_CREAT,
                             stat.S_IRUSR | stat.S_IWUSR)
            fp = os.fdopen(fd, 'w')
        except (OSError, IOError) as err:
            raise ConfigException('Error creating configuration file: %s'
                                  % err) from err
        try:
            self.write(fp)
        except IOError as err:
            raise ConfigException('Error writing configuration file: %s'
                                  % err) from err
        finally:
            fp.close()

class ConfigException(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return self.value

class GitlabRemote:
    def __init__(self, instance=None, debug_gitlab=False):
        self.logger = logging.getLogger()
        self.instance = instance
        self.gitlab = Gitlab.from_config(self.instance)

        self.logger.info('Querying GitLab instance \'%s\': %s',
                         self.instance, self.gitlab.url)

        if debug_gitlab:
            self.gitlab.enable_debug()

        self.gitlab.auth()
        self.logger.info('Authenticated as user %s (ID %d).',
                         self.gitlab.user.username, self.gitlab.user.id)

    def getuser(self):
        return self.gitlab.user

    def getemails(self):
        emails = self.gitlab.user.emails.list(iterator=False, get_all=True)
        return {email.email for email in emails}

    def getgroups(self, group, count=False):
        self.logger.debug('Getting group \'%s\'...', group)
        groups = self.gitlab.groups.list(search=group, iterator=False,
                                         get_all=True, order_by='name')

        if count or logging.root.level <= logging.DEBUG:
            numgroups = len(groups)
            self.logger.debug('Got %d group results.', numgroups)

        if count:                               # pylint: disable=no-else-return
            return groups, numgroups
        else:
            return groups

    def getgroupid(self, group):
        groups, count = self.getgroups(group, count=True)
        if count > 1:
            self.logger.warning(
                'Search for group \'%s\' returned %d groups instead of 1!',
                group, count
            )

        if count > 0:
            return groups[0].id

        return None

    def getnspath(self, gitlabobject):
        if isinstance(gitlabobject, gitlab.v4.objects.groups.Group):
            return gitlabobject.path
        if isinstance(gitlabobject, gitlab.v4.objects.users.User):
            return gitlabobject.username
        raise TypeError('Object of type %s is unsupported' % type(gitlabobject))

    def createproject(self, name, group=None, visibility='private'):
        project_params = {
                'name': name,
                'visibility': visibility
        }
        if group is not None:
            project_params['namespace_id'] = self.getgroupid(group)
        project = self.gitlab.projects.create(project_params)
        return project

    def getprojects(self, group=None, user=None, committers=None):
        def filterprojett(project):
            if user and project.creator_id == user.id:
                return True
            if committers:
                if isinstance(project, gitlab.v4.objects.projects.GroupProject):
                    # GroupProject does not support the commits attribute,
                    # thus get real Project instead
                    project = self.gitlab.projects.get(project.id)
                try:
                    for commit in project.commits.list(iterator=True, get_all=True):
                        if commit.committer_email in committers:
                            return True
                except GitlabListError:
                    self.logger.info('Project \'%s\' has no repository, skipping.',
                                     project.path)

            return False

        if group:
            objects = self.getgroups(group)

            if not objects:
                # Fall back to searching users, as the API does treat the
                # personal projects group special
                objects = self.gitlab.users.list(search=group, iterator=False,
                                               get_all=True, order_by='name')

            projects = set()
            for obj in objects:
                self.logger.debug('Getting projects in namespace \'%s\'...',
                                  self.getnspath(obj))
                projects.update(set(obj.projects.list(iterator=True, get_all=True)))
        else:
            self.logger.debug('Getting all projects...')
            projects = self.gitlab.projects.list(iterator=True, get_all=True)

        if user or committers:
            if self.logger.level <= logging.DEBUG:
                filters = []
                if user:
                    filters.append('user')
                if committers:
                    filters.append('committers')
                self.logger.debug('Filtering projects by %s...', ' and '.join(filters))

            # Flatten filter iterator to set object, to ensure funcitons
            # such as len() can be used on the result
            projects = set(filter(filterprojett, projects))

        self.logger.debug('Got %d projects.', len(projects))
        return projects

def main():
    logging.basicConfig(format=os.path.basename(sys.argv[0])
                        + ': %(levelname)s: %(message)s')
    logger = logging.getLogger()

    try:
        config = Config()
    except ConfigException as err:
        logger.error(err)
        sys.exit(1)

    parser = argparse.ArgumentParser(
        description='Commandline interface to GitLab.',
        add_help=False)
    general_args = parser.add_argument_group('general arguments')

    general_args.add_argument('-?', '-h', '--help', action='help',
                              help='print this help and exit"')
    general_args.add_argument('--usage', nargs=0, action=UsageAction,
                              help='print short usage and exit"')
    general_args.add_argument('-V', '--version', action='version',
                              version='%(prog)s ' + __version__,
                              help='print version information and exit')

    parser.add_argument('-i', '--instance', action='store', type=str,
                        help='GitLab instance to query')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help='show verbose output')
    parser.add_argument('--debug', action='store_true',
                        help='show general debugging output')

    subparsers = parser.add_subparsers(title='Commands', dest='subparser')
    subparser = {}

    subparser['list'] = subparsers.add_parser('list', help='list repositories')
    subparser['list'].add_argument('--own',
                                   action='store_true',
                                   help='list repositories started by yeurself')
    subparser['list'].add_argument('--contributed', '--own-commits',
                                   action='store_true',
                                   help='list repositories having commits by yeurself')

    subparser['mrconfig'] = \
        subparsers.add_parser('mrconfig',
                              help='generate mr configuration for repositories')

    subparser['create'] = \
        subparsers.add_parser('create',
                              help='create new repository')
    subparser['create'].add_argument('repositories', metavar='REPOSITORY',
                                     nargs='+', help='repository to create')

    for p in subparser.values():
        p.add_argument('-g', '--group', action='store', type=str,
                       help='process projects in this group')


    args = parser.parse_args()
    if args.verbose:
        logger.setLevel(logging.INFO)
    if args.debug:
        args.verbose = True
        logger.setLevel(logging.DEBUG)


    if args.instance:
        instance = args.instance
    else:
        instance = config.get('Gitlab', 'instance', fallback=None)
    if instance:
        try:
            glr = GitlabRemote(instance)
        except (ConnectionError, GitlabDataError) as err:
            logger.error('Can not connect to GitLab: %s', err)
            sys.exit(1)
    else:
        logger.error('No GitLab instance given!')
        sys.exit(1)

    group = None
    user = None
    committers = None
    if args.subparser == 'list' and (args.own or args.contributed):
        if args.own:
            user = glr.getuser()
        if args.contributed:
            committers = glr.getemails()
            logger.info('Found the following email addresses:')
            for email in committers:
                logger.info('    %s', email)
    else:
        group = config.get('General', 'default group')

    if args.subparser in ('create', 'list', 'mrconfig'):
        # Explicitly check against None to allow specifying empty string
        # on the command-line to override 'default group' setting
        if args.group is not None:
            group = args.group

    visibility = config.get('General', 'default visibility level')

    if args.subparser in ('list', 'mrconfig'):
        try:
            projects = glr.getprojects(group, user=user, committers=committers)
        except (RequestException, GitlabHttpError) as err:
            logger.error('Can not connect to GitLab: %s', err)
            sys.exit(1)
        except GitlabListError as err:
            logger.error('Error getting projects: %s', err)

        rootpath = config.get('mr', 'root project')
        rootproject = None

        if rootpath:
            for prj in projects:
                if prj.path == rootpath:
                    rootproject = prj
                    break

        projects = sorted(projects, key=lambda p: p.path.lower())

        if args.subparser == 'list':
            for prj in projects:
                print(prj.path)
        elif args.subparser == 'mrconfig':
            itemtemplate = '[%s]\ncheckout = git clone \'%s\''
            configitems = []
            if rootproject:
                rootpath = rootproject.path
                configitems.append(itemtemplate \
                                       % ('.',
                                          rootproject.ssh_url_to_repo))
            configitems.extend([itemtemplate % (prj.path,
                                                prj.ssh_url_to_repo)
                                for prj in projects if prj != rootproject])
            print('\n\n'.join(configitems))

    elif args.subparser == 'create':
        for name in args.repositories:
            if group:
                logger.info('Creating project \'%s\' in group \'%s\'...',
                            name, group)
            else:
                logger.info('Creating project \'%s\'...', name)

            project = None
            try:
                project = glr.createproject(name, group=group,
                                            visibility=visibility)
            except RequestException as err:
                logger.error('Can not connect to GitLab: %s', err)
            except GitlabCreateError as err:
                logger.error('Could not create project \'%s\': %s', name, err)

            if project:
                logger.info('Created project \'%s\': %s', project.name, project.web_url)
            else:
                logger.error('Could not create project \'%s\'.', name)

    sys.exit(os.EX_OK)


class UsageAction(argparse.Action):
    def __call__(self, parser, namespace,
                 values, option_string=None):
        parser.print_usage()
        parser.exit(os.EX_USAGE)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(128 + signal.SIGINT)
